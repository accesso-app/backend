use async_trait::async_trait;
#[cfg(feature = "testing")]
use mockall::*;
use uuid::Uuid;

use super::UnexpectedDatabaseError;
use crate::models::Application;

#[derive(Debug, thiserror::Error)]
pub enum ApplicationCreateError {
    #[error(transparent)]
    Unexpected(#[from] eyre::Report),
    // #[error("Code already exists")]
    // CodeAlreadyExists,
}

#[derive(Debug, Clone)]
pub struct ApplicationForm {
    pub is_dev: bool,
    pub redirect_uri: Vec<String>,
    pub title: String,
    /// Should be generated by call-side
    pub secret_key: String,
    pub allowed_registrations: bool,
}

impl From<Application> for ApplicationForm {
    fn from(app: Application) -> Self {
        ApplicationForm {
            is_dev: app.is_dev,
            redirect_uri: app.redirect_uri,
            title: app.title,
            secret_key: app.secret_key,
            allowed_registrations: app.allowed_registrations,
        }
    }
}

#[cfg_attr(feature = "testing", automock)]
#[async_trait]
pub trait ApplicationRepo {
    async fn application_find_by_id(
        &self,
        id: Uuid,
    ) -> Result<Option<Application>, UnexpectedDatabaseError>;

    async fn application_list(&self) -> Result<Vec<Application>, UnexpectedDatabaseError>;

    async fn application_create(
        &self,
        application: ApplicationForm,
    ) -> Result<Application, ApplicationCreateError>;

    async fn application_edit(
        &self,
        id: uuid::Uuid,
        form: ApplicationForm,
    ) -> Result<Option<Application>, UnexpectedDatabaseError>;
}

#[cfg(feature = "testing")]
#[async_trait]
impl ApplicationRepo for crate::contracts::MockDb {
    async fn application_find_by_id(
        &self,
        id: uuid::Uuid,
    ) -> Result<Option<Application>, UnexpectedDatabaseError> {
        self.application.application_find_by_id(id).await
    }

    async fn application_list(&self) -> Result<Vec<Application>, UnexpectedDatabaseError> {
        self.application.application_list().await
    }

    async fn application_create(
        &self,
        application: ApplicationForm,
    ) -> Result<Application, ApplicationCreateError> {
        self.application.application_create(application).await
    }

    async fn application_edit(
        &self,
        id: uuid::Uuid,
        form: ApplicationForm,
    ) -> Result<Option<Application>, UnexpectedDatabaseError> {
        self.application.application_edit(id, form).await
    }
}
